// Generated by jextract

package com.ffm.rtc;

import com.ffm.rtc.RtcHelper;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct IceConfig {
 *     int noStun;
 *     const char *stunServer;
 *     int stunPort;
 *     int udpMux;
 *     const char *webSocketServer;
 *     int webSocketPort;
 * }
 * }
 */
public class IceConfig {

    IceConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        com.ffm.rtc.RtcHelper.C_INT.withName("noStun"),
        MemoryLayout.paddingLayout(4),
        com.ffm.rtc.RtcHelper.C_POINTER.withName("stunServer"),
        com.ffm.rtc.RtcHelper.C_INT.withName("stunPort"),
        com.ffm.rtc.RtcHelper.C_INT.withName("udpMux"),
        com.ffm.rtc.RtcHelper.C_POINTER.withName("webSocketServer"),
        RtcHelper.C_INT.withName("webSocketPort"),
        MemoryLayout.paddingLayout(4)
    ).withName("IceConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt noStun$LAYOUT = (OfInt)$LAYOUT.select(groupElement("noStun"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int noStun
     * }
     */
    public static final OfInt noStun$layout() {
        return noStun$LAYOUT;
    }

    private static final long noStun$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int noStun
     * }
     */
    public static final long noStun$offset() {
        return noStun$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int noStun
     * }
     */
    public static int noStun(MemorySegment struct) {
        return struct.get(noStun$LAYOUT, noStun$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int noStun
     * }
     */
    public static void noStun(MemorySegment struct, int fieldValue) {
        struct.set(noStun$LAYOUT, noStun$OFFSET, fieldValue);
    }

    private static final AddressLayout stunServer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stunServer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *stunServer
     * }
     */
    public static final AddressLayout stunServer$layout() {
        return stunServer$LAYOUT;
    }

    private static final long stunServer$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *stunServer
     * }
     */
    public static final long stunServer$offset() {
        return stunServer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *stunServer
     * }
     */
    public static MemorySegment stunServer(MemorySegment struct) {
        return struct.get(stunServer$LAYOUT, stunServer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *stunServer
     * }
     */
    public static void stunServer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stunServer$LAYOUT, stunServer$OFFSET, fieldValue);
    }

    private static final OfInt stunPort$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stunPort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int stunPort
     * }
     */
    public static final OfInt stunPort$layout() {
        return stunPort$LAYOUT;
    }

    private static final long stunPort$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int stunPort
     * }
     */
    public static final long stunPort$offset() {
        return stunPort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int stunPort
     * }
     */
    public static int stunPort(MemorySegment struct) {
        return struct.get(stunPort$LAYOUT, stunPort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int stunPort
     * }
     */
    public static void stunPort(MemorySegment struct, int fieldValue) {
        struct.set(stunPort$LAYOUT, stunPort$OFFSET, fieldValue);
    }

    private static final OfInt udpMux$LAYOUT = (OfInt)$LAYOUT.select(groupElement("udpMux"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int udpMux
     * }
     */
    public static final OfInt udpMux$layout() {
        return udpMux$LAYOUT;
    }

    private static final long udpMux$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int udpMux
     * }
     */
    public static final long udpMux$offset() {
        return udpMux$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int udpMux
     * }
     */
    public static int udpMux(MemorySegment struct) {
        return struct.get(udpMux$LAYOUT, udpMux$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int udpMux
     * }
     */
    public static void udpMux(MemorySegment struct, int fieldValue) {
        struct.set(udpMux$LAYOUT, udpMux$OFFSET, fieldValue);
    }

    private static final AddressLayout webSocketServer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("webSocketServer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *webSocketServer
     * }
     */
    public static final AddressLayout webSocketServer$layout() {
        return webSocketServer$LAYOUT;
    }

    private static final long webSocketServer$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *webSocketServer
     * }
     */
    public static final long webSocketServer$offset() {
        return webSocketServer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *webSocketServer
     * }
     */
    public static MemorySegment webSocketServer(MemorySegment struct) {
        return struct.get(webSocketServer$LAYOUT, webSocketServer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *webSocketServer
     * }
     */
    public static void webSocketServer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(webSocketServer$LAYOUT, webSocketServer$OFFSET, fieldValue);
    }

    private static final OfInt webSocketPort$LAYOUT = (OfInt)$LAYOUT.select(groupElement("webSocketPort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int webSocketPort
     * }
     */
    public static final OfInt webSocketPort$layout() {
        return webSocketPort$LAYOUT;
    }

    private static final long webSocketPort$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int webSocketPort
     * }
     */
    public static final long webSocketPort$offset() {
        return webSocketPort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int webSocketPort
     * }
     */
    public static int webSocketPort(MemorySegment struct) {
        return struct.get(webSocketPort$LAYOUT, webSocketPort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int webSocketPort
     * }
     */
    public static void webSocketPort(MemorySegment struct, int fieldValue) {
        struct.set(webSocketPort$LAYOUT, webSocketPort$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


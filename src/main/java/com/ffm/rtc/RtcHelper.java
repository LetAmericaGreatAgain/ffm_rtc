// Generated by jextract

package com.ffm.rtc;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.stream.Collectors;

import static java.lang.foreign.ValueLayout.*;

public class RtcHelper {

    RtcHelper() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static {
        String path1 = "E:\\projects\\backend-projects\\ffm_rtc\\src\\main\\resources\\rtc\\libcrypto-3-x64";
        String path2 = "E:\\projects\\backend-projects\\ffm_rtc\\src\\main\\resources\\rtc\\libssl-3-x64";
        String path3 = "E:\\projects\\backend-projects\\ffm_rtc\\src\\main\\resources\\rtc\\datachannel";
        String path4 = "E:\\projects\\backend-projects\\ffm_rtc\\src\\main\\resources\\rtc\\ffm_rtc";
        System.load(System.mapLibraryName(path1));
        System.load(System.mapLibraryName(path2));
        System.load(System.mapLibraryName(path3));
        System.load(System.mapLibraryName(path4));
    }

    /*static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("ffm_rtc"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());*/
    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup();

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;

    private static class createRtcContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            RtcHelper.C_POINTER,
            RtcHelper.C_INT,
            RtcHelper.C_POINTER,
            RtcHelper.C_POINTER
        );

        public static final MemorySegment ADDR = RtcHelper.findOrThrow("createRtcContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void createRtcContext(const char *localId, int logLevel, struct IceConfig *iceConfig, struct DataChannelConfig *dataChannelConfig)
     * }
     */
    public static FunctionDescriptor createRtcContext$descriptor() {
        return createRtcContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void createRtcContext(const char *localId, int logLevel, struct IceConfig *iceConfig, struct DataChannelConfig *dataChannelConfig)
     * }
     */
    public static MethodHandle createRtcContext$handle() {
        return createRtcContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void createRtcContext(const char *localId, int logLevel, struct IceConfig *iceConfig, struct DataChannelConfig *dataChannelConfig)
     * }
     */
    public static MemorySegment createRtcContext$address() {
        return createRtcContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void createRtcContext(const char *localId, int logLevel, struct IceConfig *iceConfig, struct DataChannelConfig *dataChannelConfig)
     * }
     */
    public static void createRtcContext(MemorySegment localId, int logLevel, MemorySegment iceConfig, MemorySegment dataChannelConfig) {
        var mh$ = createRtcContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("createRtcContext", localId, logLevel, iceConfig, dataChannelConfig);
            }
            mh$.invokeExact(localId, logLevel, iceConfig, dataChannelConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class createPeerConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            RtcHelper.C_POINTER
        );

        public static final MemorySegment ADDR = RtcHelper.findOrThrow("createPeerConnection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void createPeerConnection(const char *remoteId)
     * }
     */
    public static FunctionDescriptor createPeerConnection$descriptor() {
        return createPeerConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void createPeerConnection(const char *remoteId)
     * }
     */
    public static MethodHandle createPeerConnection$handle() {
        return createPeerConnection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void createPeerConnection(const char *remoteId)
     * }
     */
    public static MemorySegment createPeerConnection$address() {
        return createPeerConnection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void createPeerConnection(const char *remoteId)
     * }
     */
    public static void createPeerConnection(MemorySegment remoteId) {
        var mh$ = createPeerConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("createPeerConnection", remoteId);
            }
            mh$.invokeExact(remoteId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class createDataChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            RtcHelper.C_POINTER,
            RtcHelper.C_POINTER
        );

        public static final MemorySegment ADDR = RtcHelper.findOrThrow("createDataChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void createDataChannel(const char *remoteId, const char *label)
     * }
     */
    public static FunctionDescriptor createDataChannel$descriptor() {
        return createDataChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void createDataChannel(const char *remoteId, const char *label)
     * }
     */
    public static MethodHandle createDataChannel$handle() {
        return createDataChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void createDataChannel(const char *remoteId, const char *label)
     * }
     */
    public static MemorySegment createDataChannel$address() {
        return createDataChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void createDataChannel(const char *remoteId, const char *label)
     * }
     */
    public static void createDataChannel(MemorySegment remoteId, MemorySegment label) {
        var mh$ = createDataChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("createDataChannel", remoteId, label);
            }
            mh$.invokeExact(remoteId, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sendTextMessageByDataChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            RtcHelper.C_POINTER,
            RtcHelper.C_POINTER
        );

        public static final MemorySegment ADDR = RtcHelper.findOrThrow("sendTextMessageByDataChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sendTextMessageByDataChannel(const char *remoteId, const char *msg)
     * }
     */
    public static FunctionDescriptor sendTextMessageByDataChannel$descriptor() {
        return sendTextMessageByDataChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sendTextMessageByDataChannel(const char *remoteId, const char *msg)
     * }
     */
    public static MethodHandle sendTextMessageByDataChannel$handle() {
        return sendTextMessageByDataChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sendTextMessageByDataChannel(const char *remoteId, const char *msg)
     * }
     */
    public static MemorySegment sendTextMessageByDataChannel$address() {
        return sendTextMessageByDataChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sendTextMessageByDataChannel(const char *remoteId, const char *msg)
     * }
     */
    public static void sendTextMessageByDataChannel(MemorySegment remoteId, MemorySegment msg) {
        var mh$ = sendTextMessageByDataChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sendTextMessageByDataChannel", remoteId, msg);
            }
            mh$.invokeExact(remoteId, msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sendBinaryMessageByDataChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            RtcHelper.C_POINTER,
            RtcHelper.C_POINTER,
            RtcHelper.C_LONG_LONG
        );

        public static final MemorySegment ADDR = RtcHelper.findOrThrow("sendBinaryMessageByDataChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sendBinaryMessageByDataChannel(const char *remoteId, unsigned char *msg, long long length)
     * }
     */
    public static FunctionDescriptor sendBinaryMessageByDataChannel$descriptor() {
        return sendBinaryMessageByDataChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sendBinaryMessageByDataChannel(const char *remoteId, unsigned char *msg, long long length)
     * }
     */
    public static MethodHandle sendBinaryMessageByDataChannel$handle() {
        return sendBinaryMessageByDataChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sendBinaryMessageByDataChannel(const char *remoteId, unsigned char *msg, long long length)
     * }
     */
    public static MemorySegment sendBinaryMessageByDataChannel$address() {
        return sendBinaryMessageByDataChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sendBinaryMessageByDataChannel(const char *remoteId, unsigned char *msg, long long length)
     * }
     */
    public static void sendBinaryMessageByDataChannel(MemorySegment remoteId, MemorySegment msg, long length) {
        var mh$ = sendBinaryMessageByDataChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sendBinaryMessageByDataChannel", remoteId, msg, length);
            }
            mh$.invokeExact(remoteId, msg, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class destroyRtcContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            RtcHelper.C_POINTER
        );

        public static final MemorySegment ADDR = RtcHelper.findOrThrow("destroyRtcContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void destroyRtcContext(void (*onClosed)())
     * }
     */
    public static FunctionDescriptor destroyRtcContext$descriptor() {
        return destroyRtcContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void destroyRtcContext(void (*onClosed)())
     * }
     */
    public static MethodHandle destroyRtcContext$handle() {
        return destroyRtcContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void destroyRtcContext(void (*onClosed)())
     * }
     */
    public static MemorySegment destroyRtcContext$address() {
        return destroyRtcContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void destroyRtcContext(void (*onClosed)())
     * }
     */
    public static void destroyRtcContext(MemorySegment onClosed) {
        var mh$ = destroyRtcContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("destroyRtcContext", onClosed);
            }
            mh$.invokeExact(onClosed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}


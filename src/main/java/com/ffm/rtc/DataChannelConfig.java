// Generated by jextract

package com.ffm.rtc;

import com.ffm.rtc.RtcHelper;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;

/**
 * {@snippet lang=c :
 * struct DataChannelConfig {
 *     void (*onOpen)();
 *     void (*onClosed)();
 *     void (*onTextMessage)(const char *);
 *     void (*onBinaryMessage)(const unsigned char *, long long);
 * }
 * }
 */
public class DataChannelConfig {

    DataChannelConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        com.ffm.rtc.RtcHelper.C_POINTER.withName("onOpen"),
        com.ffm.rtc.RtcHelper.C_POINTER.withName("onClosed"),
        com.ffm.rtc.RtcHelper.C_POINTER.withName("onTextMessage"),
        com.ffm.rtc.RtcHelper.C_POINTER.withName("onBinaryMessage")
    ).withName("DataChannelConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*onOpen)()
     * }
     */
    public static class onOpen {

        onOpen() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = com.ffm.rtc.RtcHelper.upcallHandle(Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout onOpen$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("onOpen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*onOpen)()
     * }
     */
    public static final AddressLayout onOpen$layout() {
        return onOpen$LAYOUT;
    }

    private static final long onOpen$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*onOpen)()
     * }
     */
    public static final long onOpen$offset() {
        return onOpen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*onOpen)()
     * }
     */
    public static MemorySegment onOpen(MemorySegment struct) {
        return struct.get(onOpen$LAYOUT, onOpen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*onOpen)()
     * }
     */
    public static void onOpen(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(onOpen$LAYOUT, onOpen$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*onClosed)()
     * }
     */
    public static class onClosed {

        onClosed() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = com.ffm.rtc.RtcHelper.upcallHandle(Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout onClosed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("onClosed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*onClosed)()
     * }
     */
    public static final AddressLayout onClosed$layout() {
        return onClosed$LAYOUT;
    }

    private static final long onClosed$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*onClosed)()
     * }
     */
    public static final long onClosed$offset() {
        return onClosed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*onClosed)()
     * }
     */
    public static MemorySegment onClosed(MemorySegment struct) {
        return struct.get(onClosed$LAYOUT, onClosed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*onClosed)()
     * }
     */
    public static void onClosed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(onClosed$LAYOUT, onClosed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*onTextMessage)(const char *)
     * }
     */
    public static class onTextMessage {

        onTextMessage() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            com.ffm.rtc.RtcHelper.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = com.ffm.rtc.RtcHelper.upcallHandle(Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout onTextMessage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("onTextMessage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*onTextMessage)(const char *)
     * }
     */
    public static final AddressLayout onTextMessage$layout() {
        return onTextMessage$LAYOUT;
    }

    private static final long onTextMessage$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*onTextMessage)(const char *)
     * }
     */
    public static final long onTextMessage$offset() {
        return onTextMessage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*onTextMessage)(const char *)
     * }
     */
    public static MemorySegment onTextMessage(MemorySegment struct) {
        return struct.get(onTextMessage$LAYOUT, onTextMessage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*onTextMessage)(const char *)
     * }
     */
    public static void onTextMessage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(onTextMessage$LAYOUT, onTextMessage$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*onBinaryMessage)(const unsigned char *, long long)
     * }
     */
    public static class onBinaryMessage {

        onBinaryMessage() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            com.ffm.rtc.RtcHelper.C_POINTER,
            com.ffm.rtc.RtcHelper.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = RtcHelper.upcallHandle(Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout onBinaryMessage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("onBinaryMessage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*onBinaryMessage)(const unsigned char *, long long)
     * }
     */
    public static final AddressLayout onBinaryMessage$layout() {
        return onBinaryMessage$LAYOUT;
    }

    private static final long onBinaryMessage$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*onBinaryMessage)(const unsigned char *, long long)
     * }
     */
    public static final long onBinaryMessage$offset() {
        return onBinaryMessage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*onBinaryMessage)(const unsigned char *, long long)
     * }
     */
    public static MemorySegment onBinaryMessage(MemorySegment struct) {
        return struct.get(onBinaryMessage$LAYOUT, onBinaryMessage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*onBinaryMessage)(const unsigned char *, long long)
     * }
     */
    public static void onBinaryMessage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(onBinaryMessage$LAYOUT, onBinaryMessage$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

